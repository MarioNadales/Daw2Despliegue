AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue Tomcat sobre instancia EC2 con ubuntu 20.04
Parameters:
  EC2AMI:
    Description: Imagen del Sistema Operativo
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  KeyName:
    Description: Par clave valor para acceso SSH
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey
  InstanceType:
    Description: Tamaño instancia EC2
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.nano
    - t2.micro
    - t2.small
    - t2.medium
    - t2.large
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - g2.8xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: Tipos de instancia validas
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
        - Ref: SecurityGroup
      KeyName:
        Ref: KeyName
      IamInstanceProfile: 
        "LabInstanceProfile"
      Monitoring: true
      ImageId:
        Ref: EC2AMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Actualizar la lista de paquetes del sistema
          apt update

          # Instalar el paquete openjdk-17-jdk
          apt install -y openjdk-17-jdk

          # Verificar si el usuario 'tomcat' ya existe antes de intentar crearlo
          if id "tomcat" >/dev/null 2>&1; then
              echo "El usuario 'tomcat' ya existe. No es necesario crearlo de nuevo."
          else
              # Agregar un nuevo usuario llamado 'tomcat' con las opciones especificadas
              sudo useradd -m -d /opt/tomcat -U -s /bin/false tomcat

              # Explicación de las opciones:
              # -m: Crea el directorio de inicio del usuario si no existe
              # -d /opt/tomcat: Establece el directorio de inicio en /opt/tomcat
              # -U: Crea un grupo con el mismo nombre que el usuario y hace que el usuario sea el propietario del grupo
              # -s /bin/false: Establece el shell de inicio de sesión en /bin/false, lo que impide que el usuario inicie sesión
          fi

          # Cambiar al directorio /tmp
          cd /tmp

          # Descargar Apache Tomcat
          wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.18/bin/apache-tomcat-10.1.18.tar.gz -O tomcat.tar.gz

          # Descomprimir y mover Tomcat a /opt/tomcat
          tar xzvf tomcat.tar.gz -C /opt/tomcat --strip-components=1

          # Cambiar la propiedad del directorio a tomcat:tomcat
          chown -R tomcat:tomcat /opt/tomcat/

          # Dar permisos de ejecución a los scripts en /opt/tomcat/bin
          chmod -R u+x /opt/tomcat/bin

          # Agregar roles y usuarios al archivo tomcat-users.xml
          echo -e '<tomcat-users xmlns="http://tomcat.apache.org/xml" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0" xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd">\n  <role rolename="manager-gui" />\n  <user username="manager" password="secret" roles="manager-gui" />\n  <role rolename="admin-gui" />\n  <user username="admin" password="secrete" roles="manager-gui,admin-gui" />\n</tomcat-users>' | sudo tee /opt/tomcat/conf/tomcat-users.xml > /dev/null

          # Comentar la etiqueta <Valve> en el archivo context.xml de la aplicación manager
          sudo sed -i '/<Valve/,/<\/Valve>/ s/^/<!--/' /opt/tomcat/webapps/manager/META-INF/context.xml
          sudo sed -i '/<Valve/,/<\/Valve>/ s/$/-->/' /opt/tomcat/webapps/manager/META-INF/context.xml

          # Obtener la ruta del directorio de instalación de Java (JAVA_HOME)
          JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::")

          # Crear el archivo de servicio de systemd para Tomcat
          echo -e "[Unit]\nDescription=Tomcat\nAfter=network.target\n\n[Service]\nType=forking\nUser=tomcat\nGroup=tomcat\nEnvironment=\"JAVA_HOME=$JAVA_HOME\"\nEnvironment=\"JAVA_OPTS=-Djava.security.egd=file:///dev/urandom\"\nEnvironment=\"CATALINA_BASE=/opt/tomcat\"\nEnvironment=\"CATALINA_HOME=/opt/tomcat\"\nEnvironment=\"CATALINA_PID=/opt/tomcat/temp/tomcat.pid\"\nEnvironment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"\n\nExecStart=/opt/tomcat/bin/startup.sh\nExecStop=/opt/tomcat/bin/shutdown.sh\n\nRestartSec=10\nRestart=always\n\n[Install]\nWantedBy=multi-user.target" | sudo tee /etc/systemd/system/tomcat.service > /dev/null

          # ----> Despliegue
          

          # Recargar los servicios de systemd
          sudo systemctl daemon-reload

          # Habilitar el servicio Tomcat para que se inicie en el arranque
          sudo systemctl enable tomcat.service

          # Clonar el repositorio de tu aplicación desde GitHub (si es necesario)
          git clone https://github.com/DavidHormigoRamirez/springholamundo /tmp/app

          # Acceder al directorio de tu aplicación
          cd /tmp/app

          # Construir la aplicación con Gradle
          bash gradlew build

          # gradle build

          war_file=$(ls /tmp/app/build/libs/holamundo-0.0.1-SNAPSHOT-plain.war)

          # Copiar el archivo WAR generado a la carpeta de despliegue de Tomcat
          sudo mv $war_file /opt/tomcat/webapps/

          # Cambiar el propietario y los permisos del archivo WAR
          sudo chown tomcat:tomcat /opt/tomcat/webapps/$(basename $war_file)
          sudo chmod 644 /opt/tomcat/webapps/$(basename $war_file)

          # Iniciar el servicio Tomcat
          sudo systemctl start tomcat.service
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acesso SSH y web en 8080
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp:
          Ref: SSHLocation
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp:
          Ref: SSHLocation
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
Outputs:
  EC2Instance:
    Description: Instancia EC2 creada
    Value:
      Ref: EC2Instance
  URL:
    Description: URL del servicio web
    Value: !Sub 'http://${EC2Instance.PublicDnsName}:8080/holamundo-0.0.1-SNAPSHOT-plain/hola'
